"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
load_dotenv() # load environment variables

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


ENVIRONMENT = os.environ.get("ENVIRONMENT", default="production" )

if ENVIRONMENT == 'production':
    SECURE_BROWSER_XSS_FILTER = True # protect against cross-site scripting attacks
    X_FRAME_OPTIONS = 'DENY' # to protect against clickjacking attacks
    SECURE_SSL_REDIRECT = True # make all non HTTPS traffic redirect  to HTTPS
    SECURE_HSTS_SECONDS = 3600 # [HTTP Strict Transfer Security] the time in seconds the browser should remember that this application is only accessible using HTTPS
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True # to force every subdomain to be accessible over HTTPS only
    SECURE_HSTS_PRELOAD =  True # to ensure https connection to website, before actually visiting the website
    SECURE_CONTENT_TYPE_NOSNIFF = True # 
    SESSION_COOKIE_SECURE = True # to use session cookie only over HTTPS
    CSRF_COOKIE_SECURE = True # to secure csrf cookie in HTTPS connection
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') ## to prevent redirects

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get('DEBUG', default=0))

ALLOWED_HOSTS = ['nutranova-user.onrender.com', '127.0.0.1', 'localhost']
# ENVIRONMENT = os.environ.get('ENVIRONMENT')


# Application definition

INSTALLED_APPS = [
    # 'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # local apps
    'users.apps.UsersConfig',
    'oidc.apps.OidcConfig',
    'file.apps.FileConfig',


    # 3rd party apps
    "ariadne_django",
    "multiselectfield", # to select multiple choices to be stored in database. Saving data as a list of comma-separated values
    "cloudinary",
    "rest_framework",
    "corsheaders",
    "drf_spectacular",
    "drf_spectacular_sidecar",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
# ASGI_APPLICATION = "core.asgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }

    # connecting to remote cockroachDB database
    # 'default': {
    #     'ENGINE': 'django_cockroachdb',
    #     'NAME': os.environ.get('COCKROACHDB_DATABASE_NAME'),
    #     'USER': os.environ.get('COCKROACHDB_SQL_USER'),
    #     'PASSWORD': os.environ.get('COCKROACHDB_SQL_PASSWORD'),
    #     'HOST': os.environ.get('COCKROACHDB_HOST'),
    #     'PORT': os.environ.get('COCKROACHDB_PORT'),
    # },

    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('AIVEN_DATABASE_NAME', 'DEV_USERS_DB_NAME'),
        'USER': os.environ.get('AIVEN_USER', 'DEV_USERS_DB_USERNAME'),
        'PASSWORD': os.environ.get('AIVEN_PASSWORD', 'DEV_USERS_DB_PASSWORD'),
        'HOST': os.environ.get('AIVEN_HOST', 'DEV_USERS_DB_HOST'),
        'PORT': os.environ.get('AIVEN_PORT', 'DEV_USERS_DB_PORT'),
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "users.CustomUser"

DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FileUploadParser',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}



MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

CELERY_BROKER_URL = os.environ.get("REDIS_URL")
# CELERY_RESULT_BACKEND = os.environ.get("REDIS_URL")

CORS_ALLOW_ALL_ORIGINS = True

SPECTACULAR_SETTINGS = {
    'TITLE': 'Profile-Photo-Upload Endpoint',
    'DESCRIPTION': 'This is just a documentation on the endpoint for uploading user profile picture, as every other operation is done with GraphQL',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    
    # OTHER SETTINGS

    'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
}